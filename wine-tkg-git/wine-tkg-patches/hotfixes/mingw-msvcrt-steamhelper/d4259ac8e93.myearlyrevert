diff --git a/dlls/wmphoto/unix_lib.c b/dlls/wmphoto/unix_lib.c
index 94a67434b7e4..2fa353ba13ec 100644
--- a/dlls/wmphoto/unix_lib.c
+++ b/dlls/wmphoto/unix_lib.c
@@ -39,6 +39,8 @@
 #include "initguid.h"
 #ifdef SONAME_LIBJXRGLUE
 #define ERR JXR_ERR
+#define __in_win    __in
+#define __out_win   __out
 #include <JXRGlue.h>
 #undef ERR
 #endif
diff --git a/include/Makefile.in b/include/Makefile.in
index ef4a6d55558f..940106952141 100644
--- a/include/Makefile.in
+++ b/include/Makefile.in
@@ -82,6 +82,7 @@ SOURCES = \
 	commoncontrols.idl \
 	compobj.h \
 	comsvcs.idl \
+	concurrencysal.h \
 	consoleapi.h \
 	control.idl \
 	cor.idl \
@@ -252,6 +253,7 @@ SOURCES = \
 	dplobby.h \
 	dplobby8.h \
 	dpnathlp.h \
+	driverspecs.h \
 	drmexternals.idl \
 	dsclient.h \
 	dsconf.h \
@@ -672,6 +674,7 @@ SOURCES = \
 	snmp.h \
 	softpub.h \
 	spatialaudioclient.idl \
+	specstrings.h \
 	sperror.h \
 	sql.h \
 	sqlext.h \
diff --git a/include/concurrencysal.h b/include/concurrencysal.h
new file mode 100644
index 000000000000..fc86045e9fc9
--- /dev/null
+++ b/include/concurrencysal.h
@@ -0,0 +1,48 @@
+/**
+ * This file has no copyright assigned and is placed in the Public Domain.
+ * This file is part of the mingw-w64 runtime package.
+ * No warranty is given; refer to the file DISCLAIMER.PD within this package.
+ */
+
+#ifndef CONCURRENCYSAL_HXX
+#define CONCURRENCYSAL_HXX
+
+#define _Benign_race_begin_
+#define _Benign_race_end_
+#define _No_competing_thread_begin_
+#define _No_competing_thread_end_
+
+#define _Acquires_exclusive_lock_(lock)
+#define _Acquires_lock_(lock)
+#define _Acquires_nonreentrant_lock_(lock)
+#define _Acquires_shared_lock_(lock)
+#define _Analysis_assume_lock_acquired_(lock)
+#define _Analysis_assume_lock_released_(lock)
+#define _Analysis_assume_lock_held_(lock)
+#define _Analysis_assume_lock_not_held_(lock)
+#define _Analysis_assume_same_lock_(lock1, lock2)
+#define _Analysis_suppress_lock_checking_(lock)
+#define _Create_lock_level_(level)
+#define _Csalcat1_(x,y)
+#define _Csalcat2_(x,y)
+#define _Function_ignore_lock_checking_(lock)
+#define _Guarded_by_(lock)
+#define _Has_lock_kind_(kind)
+#define _Has_lock_level_(level)
+#define _Interlocked_
+#define _Internal_lock_level_order_(a,b)
+#define _Lock_level_order_(a,b)
+#define _No_competing_thread_
+#define _Post_same_lock_(lock1,lock2)
+#define _Releases_exclusive_lock_(lock)
+#define _Releases_lock_(lock)
+#define _Releases_nonreentrant_lock_(lock)
+#define _Releases_shared_lock_(lock)
+#define _Requires_exclusive_lock_held_(lock)
+#define _Requires_shared_lock_held_(lock)
+#define _Requires_lock_held_(lock)
+#define _Requires_lock_not_held_(lock)
+#define _Requires_no_locks_held_
+#define _Write_guarded_by_(lock)
+
+#endif
diff --git a/include/driverspecs.h b/include/driverspecs.h
new file mode 100644
index 000000000000..509a2bd44bf1
--- /dev/null
+++ b/include/driverspecs.h
@@ -0,0 +1,55 @@
+/*
+ * PROJECT:         ReactOS DDK
+ * COPYRIGHT:       This file is in the Public Domain.
+ * FILE:            driverspecs.h
+ * ABSTRACT:        This header stubs out Driver Verifier annotations to
+ *                  allow drivers using them to compile with our header set.
+ */
+
+#ifndef DRIVERSPECS_H
+#define DRIVERSPECS_H
+
+#include <specstrings.h>
+#include <concurrencysal.h>
+
+#define _IRQL_raises_(x)
+#define _IRQL_requires_(x)
+#define _IRQL_requires_max_(x)
+#define _IRQL_requires_min_(x)
+#define _IRQL_requires_same_
+#define _IRQL_restores_
+#define _IRQL_saves_
+
+#define __drv_aliasesMem
+#define __drv_allocatesMem(kind)
+#define __drv_arg(x,y)
+#define __drv_at(x,y)
+#define __drv_deref(x)
+#define __drv_dispatchType(x)
+#define __drv_dispatchType_other
+#define __drv_formatString(x)
+#define __drv_freesMem(kind)
+#define __drv_in(x)
+#define __drv_in_deref(x)
+#define __drv_maxIRQL(x)
+#define __drv_nonConstant
+#define __drv_out(x)
+#define __drv_out_deref(x)
+#define __drv_raisesIRQL(x)
+#define __drv_requiresIRQL(x)
+#define __drv_restoresIRQL
+#define __drv_restoresIRQLGlobal(x,y)
+#define __drv_savesIRQL
+#define __drv_savesIRQLGlobal(x,y)
+#define __drv_setsIRQL(x)
+#define __drv_useCancelIRQL
+#define __drv_valueIs(x)
+#define __drv_when(x,y)
+
+#define __internal_kernel_driver
+#define __kernel_code
+#define __kernel_driver
+#define __user_code
+#define __user_driver
+
+#endif
diff --git a/include/msvcrt/corecrt.h b/include/msvcrt/corecrt.h
index 4adbe0920f61..4cb738a6e2dd 100644
--- a/include/msvcrt/corecrt.h
+++ b/include/msvcrt/corecrt.h
@@ -41,6 +41,8 @@
 # define _UCRT
 #endif
 
+#include <sal.h>
+
 #ifndef _MSC_VER
 #  ifndef __int8
 #    define __int8  char
diff --git a/include/ntdef.h b/include/ntdef.h
index 68ced669baac..74c88ba572be 100644
--- a/include/ntdef.h
+++ b/include/ntdef.h
@@ -20,6 +20,7 @@
 #define _NTDEF_
 
 #include <basetsd.h>
+#include <specstrings.h>
 
 #ifdef __cplusplus
 extern "C" {
diff --git a/include/rpcdce.h b/include/rpcdce.h
index 2b289b265507..79418f8084cf 100644
--- a/include/rpcdce.h
+++ b/include/rpcdce.h
@@ -33,6 +33,8 @@ extern "C" {
 #define OPTIONAL
 #endif
 
+#include <specstrings.h>
+
 #ifndef GUID_DEFINED
 #include <guiddef.h>
 #endif
diff --git a/include/specstrings.h b/include/specstrings.h
new file mode 100644
index 000000000000..f2636a497790
--- /dev/null
+++ b/include/specstrings.h
@@ -0,0 +1,340 @@
+/**
+ * This file has no copyright assigned and is placed in the Public Domain.
+ * This file is part of the mingw-w64 runtime package.
+ * No warranty is given; refer to the file DISCLAIMER.PD within this package.
+ */
+
+#ifndef SPECSTRINGS_H
+#define SPECSTRINGS_H
+
+#define __specstrings
+
+#include <sal.h>
+
+#ifdef __cplusplus
+#ifndef __nothrow
+#define __nothrow __declspec(nothrow)
+#endif
+extern "C" {
+#else
+#ifndef __nothrow
+#define __nothrow
+#endif
+#endif
+
+#define SAL__deref_in
+#define SAL__deref_in_ecount(size)
+#define SAL__deref_in_bcount(size)
+
+#define SAL__deref_in_opt
+#define SAL__deref_in_ecount_opt(size)
+#define SAL__deref_in_bcount_opt(size)
+
+#define SAL__deref_opt_in
+#define SAL__deref_opt_in_ecount(size)
+#define SAL__deref_opt_in_bcount(size)
+
+#define SAL__deref_opt_in_opt
+#define SAL__deref_opt_in_ecount_opt(size)
+#define SAL__deref_opt_in_bcount_opt(size)
+
+#define SAL__out_awcount(expr,size)
+#define SAL__in_awcount(expr,size)
+
+/* Renamed __null to SAL__null for avoiding private keyword conflicts between
+   gcc and MS world.  */
+#define SAL__null
+#define SAL__notnull
+#define SAL__maybenull
+#define SAL__readonly
+#define SAL__notreadonly
+#define SAL__maybereadonly
+#define SAL__valid
+#define SAL__notvalid
+#define SAL__maybevalid
+#define SAL__readableTo(extent)
+#define SAL__elem_readableTo(size)
+#define SAL__byte_readableTo(size)
+#define SAL__writableTo(size)
+#define SAL__elem_writableTo(size)
+#define SAL__byte_writableTo(size)
+#define SAL__deref
+#define SAL__pre
+#define SAL__post
+#define SAL__precond(expr)
+#define SAL__postcond(expr)
+#define SAL__exceptthat
+#define SAL__execeptthat
+#define SAL__inner_success(expr)
+#define SAL__inner_checkReturn
+#define SAL__inner_typefix(ctype)
+#define SAL__inner_override
+#define SAL__inner_callback
+#define SAL__inner_blocksOn(resource)
+#define SAL__inner_fallthrough_dec
+#define SAL__inner_fallthrough
+#define __refparam
+#define SAL__inner_control_entrypoint(category)
+#define SAL__inner_data_entrypoint(category)
+
+#define SAL__ecount(size)
+#define SAL__bcount(size)
+
+#define SAL__in
+#define SAL__in_opt
+#define SAL__in_nz
+#define SAL__in_nz_opt
+#define SAL__in_z
+#define SAL__in_z_opt
+#define SAL__in_ecount(size)
+#define SAL__in_ecount_nz(size)
+#define SAL__in_ecount_z(size)
+#define SAL__in_bcount(size)
+#define SAL__in_bcount_z(size)
+#define SAL__in_bcount_nz(size)
+#define SAL__in_ecount_opt(size)
+#define SAL__in_bcount_opt(size)
+#define SAL__in_ecount_z_opt(size)
+#define SAL__in_bcount_z_opt(size)
+#define SAL__in_ecount_nz_opt(size)
+#define SAL__in_bcount_nz_opt(size)
+
+#define SAL__out
+#define SAL__out_ecount(size)
+#define SAL__out_z
+#define SAL__out_nz
+#define SAL__out_nz_opt
+#define SAL__out_z_opt
+#define SAL__out_ecount_part(size,length)
+#define SAL__out_ecount_full(size)
+#define SAL__out_ecount_nz(size)
+#define SAL__out_ecount_z(size)
+#define SAL__out_ecount_part_z(size,length)
+#define SAL__out_ecount_full_z(size)
+#define SAL__out_bcount(size)
+#define SAL__out_bcount_part(size,length)
+#define SAL__out_bcount_full(size)
+#define SAL__out_bcount_z(size)
+#define SAL__out_bcount_part_z(size,length)
+#define SAL__out_bcount_full_z(size)
+#define SAL__out_bcount_nz(size)
+
+#define SAL__inout
+#define SAL__inout_ecount(size)
+#define SAL__inout_bcount(size)
+#define SAL__inout_ecount_part(size,length)
+#define SAL__inout_bcount_part(size,length)
+#define SAL__inout_ecount_full(size)
+#define SAL__inout_bcount_full(size)
+#define SAL__inout_z
+#define SAL__inout_ecount_z(size)
+#define SAL__inout_bcount_z(size)
+#define SAL__inout_nz
+#define SAL__inout_ecount_nz(size)
+#define SAL__inout_bcount_nz(size)
+#define SAL__ecount_opt(size)
+#define SAL__bcount_opt(size)
+#define SAL__out_opt
+#define SAL__out_ecount_opt(size)
+#define SAL__out_bcount_opt(size)
+#define SAL__out_ecount_part_opt(size,length)
+#define SAL__out_bcount_part_opt(size,length)
+#define SAL__out_ecount_full_opt(size)
+#define SAL__out_bcount_full_opt(size)
+#define SAL__out_ecount_z_opt(size)
+#define SAL__out_bcount_z_opt(size)
+#define SAL__out_ecount_part_z_opt(size,length)
+#define SAL__out_bcount_part_z_opt(size,length)
+#define SAL__out_ecount_full_z_opt(size)
+#define SAL__out_bcount_full_z_opt(size)
+#define SAL__out_ecount_nz_opt(size)
+#define SAL__out_bcount_nz_opt(size)
+#define SAL__inout_opt
+#define SAL__inout_ecount_opt(size)
+#define SAL__inout_bcount_opt(size)
+#define SAL__inout_ecount_part_opt(size,length)
+#define SAL__inout_bcount_part_opt(size,length)
+#define SAL__inout_ecount_full_opt(size)
+#define SAL__inout_bcount_full_opt(size)
+#define SAL__inout_z_opt
+#define SAL__inout_ecount_z_opt(size)
+#define SAL__inout_bcount_z_opt(size)
+#define SAL__inout_nz_opt
+#define SAL__inout_ecount_nz_opt(size)
+#define SAL__inout_bcount_nz_opt(size)
+#define SAL__deref_ecount(size)
+#define SAL__deref_bcount(size)
+#define SAL__deref_out
+#define SAL__deref_out_ecount(size)
+#define SAL__deref_out_bcount(size)
+#define SAL__deref_out_ecount_part(size,length)
+#define SAL__deref_out_bcount_part(size,length)
+#define SAL__deref_out_ecount_full(size)
+#define SAL__deref_out_bcount_full(size)
+#define SAL__deref_out_z
+#define SAL__deref_out_ecount_z(size)
+#define SAL__deref_out_bcount_z(size)
+#define SAL__deref_out_nz
+#define SAL__deref_out_ecount_nz(size)
+#define SAL__deref_out_bcount_nz(size)
+#define SAL__deref_inout
+#define SAL__deref_inout_ecount(size)
+#define SAL__deref_inout_bcount(size)
+#define SAL__deref_inout_ecount_part(size,length)
+#define SAL__deref_inout_bcount_part(size,length)
+#define SAL__deref_inout_ecount_full(size)
+#define SAL__deref_inout_bcount_full(size)
+#define SAL__deref_inout_z
+#define SAL__deref_inout_ecount_z(size)
+#define SAL__deref_inout_bcount_z(size)
+#define SAL__deref_inout_nz
+#define SAL__deref_inout_ecount_nz(size)
+#define SAL__deref_inout_bcount_nz(size)
+#define SAL__deref_ecount_opt(size)
+#define SAL__deref_bcount_opt(size)
+#define SAL__deref_out_opt
+#define SAL__deref_out_ecount_opt(size)
+#define SAL__deref_out_bcount_opt(size)
+#define SAL__deref_out_ecount_part_opt(size,length)
+#define SAL__deref_out_bcount_part_opt(size,length)
+#define SAL__deref_out_ecount_full_opt(size)
+#define SAL__deref_out_bcount_full_opt(size)
+#define SAL__deref_out_z_opt
+#define SAL__deref_out_ecount_z_opt(size)
+#define SAL__deref_out_bcount_z_opt(size)
+#define SAL__deref_out_nz_opt
+#define SAL__deref_out_ecount_nz_opt(size)
+#define SAL__deref_out_bcount_nz_opt(size)
+#define SAL__deref_inout_opt
+#define SAL__deref_inout_ecount_opt(size)
+#define SAL__deref_inout_bcount_opt(size)
+#define SAL__deref_inout_ecount_part_opt(size,length)
+#define SAL__deref_inout_bcount_part_opt(size,length)
+#define SAL__deref_inout_ecount_full_opt(size)
+#define SAL__deref_inout_bcount_full_opt(size)
+#define SAL__deref_inout_z_opt
+#define SAL__deref_inout_ecount_z_opt(size)
+#define SAL__deref_inout_bcount_z_opt(size)
+#define SAL__deref_inout_nz_opt
+#define SAL__deref_inout_ecount_nz_opt(size)
+#define SAL__deref_inout_bcount_nz_opt(size)
+#define SAL__deref_opt_ecount(size)
+#define SAL__deref_opt_bcount(size)
+#define SAL__deref_opt_out
+#define SAL__deref_opt_out_z
+#define SAL__deref_opt_out_ecount(size)
+#define SAL__deref_opt_out_bcount(size)
+#define SAL__deref_opt_out_ecount_part(size,length)
+#define SAL__deref_opt_out_bcount_part(size,length)
+#define SAL__deref_opt_out_ecount_full(size)
+#define SAL__deref_opt_out_bcount_full(size)
+#define SAL__deref_opt_inout
+#define SAL__deref_opt_inout_ecount(size)
+#define SAL__deref_opt_inout_bcount(size)
+#define SAL__deref_opt_inout_ecount_part(size,length)
+#define SAL__deref_opt_inout_bcount_part(size,length)
+#define SAL__deref_opt_inout_ecount_full(size)
+#define SAL__deref_opt_inout_bcount_full(size)
+#define SAL__deref_opt_inout_z
+#define SAL__deref_opt_inout_ecount_z(size)
+#define SAL__deref_opt_inout_bcount_z(size)
+#define SAL__deref_opt_inout_nz
+#define SAL__deref_opt_inout_ecount_nz(size)
+#define SAL__deref_opt_inout_bcount_nz(size)
+#define SAL__deref_opt_ecount_opt(size)
+#define SAL__deref_opt_bcount_opt(size)
+#define SAL__deref_opt_out_opt
+#define SAL__deref_opt_out_ecount_opt(size)
+#define SAL__deref_opt_out_bcount_opt(size)
+#define SAL__deref_opt_out_ecount_part_opt(size,length)
+#define SAL__deref_opt_out_bcount_part_opt(size,length)
+#define SAL__deref_opt_out_ecount_full_opt(size)
+#define SAL__deref_opt_out_bcount_full_opt(size)
+#define SAL__deref_opt_out_z_opt
+#define SAL__deref_opt_out_ecount_z_opt(size)
+#define SAL__deref_opt_out_bcount_z_opt(size)
+#define SAL__deref_opt_out_nz_opt
+#define SAL__deref_opt_out_ecount_nz_opt(size)
+#define SAL__deref_opt_out_bcount_nz_opt(size)
+#define SAL__deref_opt_inout_opt
+#define SAL__deref_opt_inout_ecount_opt(size)
+#define SAL__deref_opt_inout_bcount_opt(size)
+#define SAL__deref_opt_inout_ecount_part_opt(size,length)
+#define SAL__deref_opt_inout_bcount_part_opt(size,length)
+#define SAL__deref_opt_inout_ecount_full_opt(size)
+#define SAL__deref_opt_inout_bcount_full_opt(size)
+#define SAL__deref_opt_inout_z_opt
+#define SAL__deref_opt_inout_ecount_z_opt(size)
+#define SAL__deref_opt_inout_bcount_z_opt(size)
+#define SAL__deref_opt_inout_nz_opt
+#define SAL__deref_opt_inout_ecount_nz_opt(size)
+#define SAL__deref_opt_inout_bcount_nz_opt(size)
+
+#define SAL__success(expr)
+#define SAL__nullterminated
+#define SAL__nullnullterminated
+#define SAL__reserved
+#define SAL__checkReturn
+#define SAL__typefix(ctype)
+#define SAL__override
+#define SAL__callback
+#define SAL__format_string
+#define SAL__blocksOn(resource)
+#define SAL__control_entrypoint(category)
+#define SAL__data_entrypoint(category)
+
+#define __encoded_pointer
+
+#define _Post_equals_last_error_
+
+#ifndef __fallthrough
+#define __fallthrough
+#endif
+
+#ifndef __analysis_assume
+#define __analysis_assume(expr)
+#endif
+
+#ifndef __CLR_OR_THIS_CALL
+#define __CLR_OR_THIS_CALL
+#endif
+
+#ifndef __CLRCALL_OR_CDECL
+#define __CLRCALL_OR_CDECL __cdecl
+#endif
+
+#ifndef __STDC_WANT_SECURE_LIB__
+#define __STDC_WANT_SECURE_LIB__ 0
+#endif
+
+#ifndef _CRT_SECURE_NO_DEPRECATE
+#define _CRT_SECURE_NO_DEPRECATE
+#endif
+
+#ifndef RC_INVOKED
+#ifndef _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
+#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 0
+#endif
+#ifndef _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT
+#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT 0
+#endif
+#ifndef _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES
+#define _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES 0
+#endif
+#endif
+
+#ifndef DECLSPEC_ADDRSAFE
+#if (_MSC_VER >= 1200) && (defined(_M_ALPHA) || defined(_M_AXP64))
+#define DECLSPEC_ADDRSAFE  __declspec(address_safe)
+#else
+#define DECLSPEC_ADDRSAFE
+#endif
+#endif /* DECLSPEC_ADDRSAFE */
+
+#ifdef __cplusplus
+}
+#endif
+
+#include <driverspecs.h>
+
+#endif
diff --git a/include/winerror.h b/include/winerror.h
index f22b24f267be..377c61e724b1 100644
--- a/include/winerror.h
+++ b/include/winerror.h
@@ -19,6 +19,8 @@
 #ifndef __WINE_WINERROR_H
 #define __WINE_WINERROR_H
 
+#include <specstrings.h>
+
 #define FACILITY_NULL                         0
 #define FACILITY_RPC                          1
 #define FACILITY_DISPATCH                     2
diff --git a/include/winnt.h b/include/winnt.h
index 53d9af8bf960..58f1267773dd 100644
--- a/include/winnt.h
+++ b/include/winnt.h
@@ -24,6 +24,7 @@
 #include <basetsd.h>
 #include <guiddef.h>
 #include <winapifamily.h>
+#include <specstrings.h>
 
 #ifndef RC_INVOKED
 #include <ctype.h>
